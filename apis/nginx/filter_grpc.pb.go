// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nginx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NginxFilterClient is the client API for NginxFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NginxFilterClient interface {
	// Handle defines a remote call that will receive the HTTP request
	// and return the decision before NGINX can pass it to the next filter or
	// to the backends
	Handle(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*Decision, error)
}

type nginxFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewNginxFilterClient(cc grpc.ClientConnInterface) NginxFilterClient {
	return &nginxFilterClient{cc}
}

func (c *nginxFilterClient) Handle(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*Decision, error) {
	out := new(Decision)
	err := c.cc.Invoke(ctx, "/filter.NginxFilter/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NginxFilterServer is the server API for NginxFilter service.
// All implementations must embed UnimplementedNginxFilterServer
// for forward compatibility
type NginxFilterServer interface {
	// Handle defines a remote call that will receive the HTTP request
	// and return the decision before NGINX can pass it to the next filter or
	// to the backends
	Handle(context.Context, *FilterRequest) (*Decision, error)
	mustEmbedUnimplementedNginxFilterServer()
}

// UnimplementedNginxFilterServer must be embedded to have forward compatible implementations.
type UnimplementedNginxFilterServer struct {
}

func (UnimplementedNginxFilterServer) Handle(context.Context, *FilterRequest) (*Decision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedNginxFilterServer) mustEmbedUnimplementedNginxFilterServer() {}

// UnsafeNginxFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NginxFilterServer will
// result in compilation errors.
type UnsafeNginxFilterServer interface {
	mustEmbedUnimplementedNginxFilterServer()
}

func RegisterNginxFilterServer(s grpc.ServiceRegistrar, srv NginxFilterServer) {
	s.RegisterService(&NginxFilter_ServiceDesc, srv)
}

func _NginxFilter_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxFilterServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.NginxFilter/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxFilterServer).Handle(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NginxFilter_ServiceDesc is the grpc.ServiceDesc for NginxFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NginxFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filter.NginxFilter",
	HandlerType: (*NginxFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _NginxFilter_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/nginx/filter.proto",
}
